// <auto-generated />
using System;
using CoinyProject.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoinyProject.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240304150808_update")]
    partial class update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.AlbumElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessibilityId")
                        .HasColumnType("int");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccessibilityId")
                        .IsUnique();

                    b.HasIndex("AlbumId");

                    b.ToTable("AlbumElements");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.AlbumElementAccessibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AlbumElementAccessibilities");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumElementId")
                        .HasColumnType("int");

                    b.Property<float>("BetDelta")
                        .HasColumnType("real");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSoldEarlier")
                        .HasColumnType("bit");

                    b.Property<float>("StartPrice")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AlbumElementId")
                        .IsUnique();

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.AuctionBet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("AuctionBets");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiscussionTopicId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RootQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionTopicId");

                    b.HasIndex("UserId");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.DiscussionMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("UserId");

                    b.ToTable("DiscussionMessages");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.DiscussionTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DiscussionTopics");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.FavoriteAlbums", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteAlbums");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.Album", b =>
                {
                    b.HasOne("CoinyProject.Core.Domain.Entities.User", "User")
                        .WithMany("Albums")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.AlbumElement", b =>
                {
                    b.HasOne("CoinyProject.Core.Domain.Entities.AlbumElementAccessibility", "Accessibility")
                        .WithOne("AlbumElement")
                        .HasForeignKey("CoinyProject.Core.Domain.Entities.AlbumElement", "AccessibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoinyProject.Core.Domain.Entities.Album", "Album")
                        .WithMany("Elements")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accessibility");

                    b.Navigation("Album");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.Auction", b =>
                {
                    b.HasOne("CoinyProject.Core.Domain.Entities.AlbumElement", "AlbumElement")
                        .WithOne("Auction")
                        .HasForeignKey("CoinyProject.Core.Domain.Entities.Auction", "AlbumElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlbumElement");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.AuctionBet", b =>
                {
                    b.HasOne("CoinyProject.Core.Domain.Entities.Auction", "Auction")
                        .WithMany("AuctionBets")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoinyProject.Core.Domain.Entities.User", "User")
                        .WithMany("AuctionBets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.Discussion", b =>
                {
                    b.HasOne("CoinyProject.Core.Domain.Entities.DiscussionTopic", "DiscussionTopic")
                        .WithMany("Discussions")
                        .HasForeignKey("DiscussionTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoinyProject.Core.Domain.Entities.User", "User")
                        .WithMany("Discussions")
                        .HasForeignKey("UserId");

                    b.Navigation("DiscussionTopic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.DiscussionMessage", b =>
                {
                    b.HasOne("CoinyProject.Core.Domain.Entities.Discussion", "Discussion")
                        .WithMany("Messages")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoinyProject.Core.Domain.Entities.User", "User")
                        .WithMany("DiscussionMessages")
                        .HasForeignKey("UserId");

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.FavoriteAlbums", b =>
                {
                    b.HasOne("CoinyProject.Core.Domain.Entities.Album", "Album")
                        .WithMany("FavoriteAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoinyProject.Core.Domain.Entities.User", "User")
                        .WithMany("FavoriteAlbums")
                        .HasForeignKey("UserId");

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.User", b =>
                {
                    b.HasOne("CoinyProject.Core.Domain.Entities.UserRole", "Role")
                        .WithOne("User")
                        .HasForeignKey("CoinyProject.Core.Domain.Entities.User", "UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.Album", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("FavoriteAlbums");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.AlbumElement", b =>
                {
                    b.Navigation("Auction")
                        .IsRequired();
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.AlbumElementAccessibility", b =>
                {
                    b.Navigation("AlbumElement")
                        .IsRequired();
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.Auction", b =>
                {
                    b.Navigation("AuctionBets");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.Discussion", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.DiscussionTopic", b =>
                {
                    b.Navigation("Discussions");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("AuctionBets");

                    b.Navigation("DiscussionMessages");

                    b.Navigation("Discussions");

                    b.Navigation("FavoriteAlbums");
                });

            modelBuilder.Entity("CoinyProject.Core.Domain.Entities.UserRole", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
